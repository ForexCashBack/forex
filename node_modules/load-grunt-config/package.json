{
  "name": "load-grunt-config",
  "version": "0.8.0",
  "description": "Grunt plugin that lets you break up your Gruntfile config by task",
  "main": "index.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/firstandthird/load-grunt-config.git"
  },
  "keywords": [
    "gruntplugin"
  ],
  "author": {
    "name": "First + Third"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/firstandthird/load-grunt-config/issues"
  },
  "devDependencies": {
    "grunt-simple-mocha": "~0.4.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.2",
    "grunt-notify": "~0.2.13",
    "grunt-gh-pages": "~0.9.0",
    "grunt-ghpage": "~0.2.0",
    "sinon": "^1.9.0",
    "proxyquire": "^0.5.3"
  },
  "dependencies": {
    "glob": "~3.2.6",
    "js-yaml": "~3.0.1",
    "load-grunt-tasks": "~0.3.0",
    "lodash-node": "~2.4.1",
    "async": "~0.2.10"
  },
  "readme": "#load-grunt-config\n\nload-grunt-config is a Grunt library that allows you to break up your Gruntfile config by task.  For most small projects a single Gruntfile.js is perfect. But as a project grows, the Gruntfile.js can quickly become unmanagable; this is where load-grunt-config comes in handy.  It was heavily inspired by [Thomas Boyt's \"More Maintainable Gruntfiles\"](http://www.thomasboyt.com/2013/09/01/maintainable-grunt.html).\n\n##Features\n\n- Each task has its own config file. Example: jshint.js, mocha.js, etc.\n- Auto load all grunt plugins.  Uses [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks).\n- Auto expose package.json (`<%= package.name %>`).\n- Support for YAML files.\n- Support for coffeescript files.\n- Support for returning a function.\n- Easily register task aliases with `aliases.(js|yaml|coffee)`.\n\n##Installation\n\n```bash\nnpm install -D load-grunt-config\n```\n\n##Example\n\nBasic Gruntfile.js\n```javascript\nmodule.exports = function(grunt) {\n\n\trequire('load-grunt-config')(grunt);\n\n};\n```\n\nGruntfile.js with options\n```javascript\nmodule.exports = function(grunt) {\n\n\trequire('load-grunt-config')(grunt, {\n\t\tconfigPath: path.join(process.cwd(), 'grunt'), //path to task.js files, defaults to grunt dir\n\t\tinit: true, //auto grunt.initConfig\n\t\tdata: { //data passed into config.  Can use with <%= test %>\n\t\t\ttest: false\n\t\t},\n\t\tloadGruntTasks: { //can optionally pass options to load-grunt-tasks.  If you set to false, it will disable auto loading tasks.\n\t\t\tpattern: 'grunt-*',\n\t\t\tconfig: require('./package.json'),\n\t\t\tscope: 'devDependencies'\n\t\t}\n\t});\n\n};\n```\n\n###Grunt tasks files\n\nHere's what the files in your `grunt/` folder could look like.  You can use either .js, .yaml, or .coffee - whatever you prefer and you can mix and match as you see fit.\n\nExample js file returning an object - `grunt/watch.js`\n```javascript\nmodule.exports = {\n  all: {\n    files: [\n      '<%= jshint.all %>',\n      'grunt/*.yaml'\n    ],\n    tasks: [\n      'default'\n    ]\n  }\n};\n```\n\nExample js file returning a function - `grunt/jshint.js`\n```javascript\nmodule.exports = function (grunt, options) {\n  return {\n    all: [\n      'Gruntfile.js',\n      'grunt/*.js',\n      'lib/*.js',\n      'test/*.js',\n      options.someFile\n    ]\n  };\n};\n```\n\nExample yaml file - `grunt/notify.yaml`\n```yaml\ndefault:\n  options:\n    message: 'Default finished'\n```\n\nExample coffee file - `grunt/task.coffee`\n```coffee\nmodule.exports =\n  options:\n    bare: true\n```\n\n###Aliases\n\nIf your `grunt/` folder contains an `aliases.(js|yaml|coffee)` file, `load-grunt-config` will use that to define your tasks aliases (like `grunt.registerTask('default', ['jshint']);`).\n\ngrunt/aliases.yaml\n```yaml\ndefault:\n  - 'jshint'\n  - 'mocha'\n  - 'notify'\n```\n\n### Custom Config\n\nThere are certain scenarios where you might have a base config for your team, and you want to be able to override some of the config based on your personal setup.  You can do that with the `overridePath` property.  In this case, the library will merge the two, with the override path taking priority.  For example:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  require('load-grunt-config')(grunt, {\n    configPath: path.join(process.cwd(), 'vendor'),\n    overridePath: path.join(process.cwd(), 'config-'+process.env.USER)\n  });\n\n};\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/firstandthird/load-grunt-config",
  "_id": "load-grunt-config@0.8.0",
  "_shasum": "d62c27dcf91598947e8361fc96b51e0bd2be3215",
  "_from": "load-grunt-config@",
  "_resolved": "https://registry.npmjs.org/load-grunt-config/-/load-grunt-config-0.8.0.tgz"
}
